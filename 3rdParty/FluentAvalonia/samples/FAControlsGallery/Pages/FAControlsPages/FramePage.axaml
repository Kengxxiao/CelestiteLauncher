<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ui="using:FluentAvalonia.UI.Controls"
             xmlns:ctrls="using:FAControlsGallery.Controls"
             xmlns:pg="using:FAControlsGallery.Pages"
             mc:Ignorable="d" d:DesignWidth="1100" d:DesignHeight="1200"
             x:Class="FAControlsGallery.Pages.FramePage"
             x:DataType="pg:FramePage">

    <StackPanel Spacing="8">
        <ctrls:ControlExample TargetType="ui:Frame"
                              Header="Frame API in Action"
                              XamlSource="avares://FAControlsGallery/Pages/SampleCode/Frame.xaml.txt"
                              CSharpSource="avares://FAControlsGallery/Pages/SampleCode/Frame.cs.txt">

            <StackPanel>
                <ListBox Name="PageSelection"
                         ItemsSource="{Binding PageOptions}">
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                </ListBox>

                <Border BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}" BorderThickness="1">
                    <ui:Frame Name="TestFrame" MaxWidth="500" MaxHeight="500"
                              MinWidth="250" MinHeight="250"/>
                </Border>
            </StackPanel>

            <ctrls:ControlExample.Options>
                <StackPanel Spacing="3" DockPanel.Dock="Top">
                    <TextBlock Text="{Binding #TestFrame.BackStackDepth, StringFormat='{}Items in Back Stack: {0}'}" HorizontalAlignment="Right" />
                    <TextBlock Text="{Binding #TestFrame.CanGoBack, StringFormat='{}Can Go Back: {0}'}" HorizontalAlignment="Right" />
                    <TextBlock Text="{Binding #TestFrame.ForwardStack.Count, StringFormat='{}Items in Forward Stack: {0}'}" HorizontalAlignment="Right" />
                    <TextBlock Text="{Binding #TestFrame.CanGoForward, StringFormat='{}Can Go Forward: {0}'}" HorizontalAlignment="Right" />

                    <Button Content="Go Back" Command="{Binding #TestFrame.GoBack}" IsEnabled="{Binding #TestFrame.CanGoBack}" />
                    <Button Content="Go Forward" Command="{Binding #TestFrame.GoForward}" IsEnabled="{Binding #TestFrame.CanGoForward}" />




                </StackPanel>
            </ctrls:ControlExample.Options>

            <ctrls:ControlExample.UsageNotes>
                NOTE: Because no 'Page' control exists in Avalonia like UWP/WinUI, IControl is targeted by the Frame logic. IControl does not have a method 'OnNavigatedTo' so if you need to pass a custom parameter into your page it must be done manually. Easiest way is to handle the Navigated event from Frame, get the new page from the EventArgs and pass the parameter in manually.
            </ctrls:ControlExample.UsageNotes>

        </ctrls:ControlExample>

        <ctrls:ControlExample Header="Passing a Navigation parameter"
                              CSharpSource="avares://FAControlsGallery/Pages/SampleCode/Frame2.cs.txt">
            
        </ctrls:ControlExample>

        <ctrls:ControlExample Header="Using a custom Navigation Factory"
                              CSharpSource="avares://FAControlsGallery/Pages/SampleCode/Frame3.cs.txt">
            <TextBlock TextWrapping="Wrap">
                Using a custom navigation factory turns the page creation over to you allowing you to pass custom objects, like view models, for page creation instead of a Type which uses Activator.CreateInstance by default.
            </TextBlock>

            <ctrls:ControlExample.UsageNotes>
                <x:String xml:space="preserve">
When implementing INavigationPageFactory, you don't have to provide an implementation for both methods. If you only need GetPageFromObject(object) (Frame.NavigateFromObject), you can safely return null in GetPage(Type), and vice versa.
                </x:String>
            </ctrls:ControlExample.UsageNotes>
        </ctrls:ControlExample>
    
    </StackPanel>
    
</UserControl>
